#!/usr/bin/env/ python

"""Service entry-point."""
# Import libraries
import json
import logging

from modules.dal import Project


# Setup logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)


def main(event, context=None):
    """
    Handle JSON payload event data and return dict as JSON.

    Parameters
    ----------
    event : dict
        The Eventbridge event payload with loandata for reporting as its detail.
    context : LambdaContext
        The lambda context object (for Lambda use only).
    Returns
    -------
    dict{str:any}
        Returns a dict which contains the reports generated by the service.
    """
    event = {} if event is None else event
    logger.info('Service invoked by event: %s', json.dumps(event, indent=2))

    # Load all rules
    project = Project()
    rules = [rule for _ in project.mappings.values() for rule in _]
    logger.info('Service loaded rules: %s', json.dumps(rules, indent=2))

    books = []
    for record in event.get('Records', [{}]):
        if not all(
            key in record for key in ['source' ,'detail-type', 'detail']
        ):
            logger.error(
                'Service received invalid EventBridge event - skipping event'
            )
            continue
    
        # Attempt to load bookdata
        try:
            books.append(json.loads(record['detail']))
        except json.JSONDecodeError:
            logger.error(
                'Service received invalid event detail - skipping event'
            )
            continue

    logger.info('Service received books: %s', json.dumps(books, indent=2))

    # TODO: Generate reports
    reports = []
    for book in books:
        pass

    return {'reports': reports}
